"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[9541],{9665:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var l=i(4848),s=i(8453);const r={sidebar_position:1},t="Starting up with Kotlin",a={id:"tutorial/starting-up-with-kotlin",title:"Starting up with Kotlin",description:"From Java to Kotlin",source:"@site/docs/tutorial/starting-up-with-kotlin.md",sourceDirName:"tutorial",slug:"/tutorial/starting-up-with-kotlin",permalink:"/kotlin-notes/docs/tutorial/starting-up-with-kotlin",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/kotlin-notes/docs/tutorial/starting-up-with-kotlin.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial",permalink:"/kotlin-notes/docs/category/tutorial"},next:{title:"Nullability & Functional Programming",permalink:"/kotlin-notes/docs/tutorial/nullability-functional-programming"}},c={},d=[{value:"From Java to Kotlin",id:"from-java-to-kotlin",level:2},{value:"Basics",id:"basics",level:2},{value:"&quot;Hello, world&quot; Example",id:"hello-world-example",level:3},{value:"Variables",id:"variables",level:3},{value:"Functions",id:"functions",level:3},{value:"Calling a top-level function from Java",id:"calling-a-top-level-function-from-java",level:4},{value:"Named &amp; default arguments",id:"named--default-arguments",level:3},{value:"Default Values",id:"default-values",level:4},{value:"Named arguments",id:"named-arguments",level:4},{value:"What will be printed?",id:"what-will-be-printed",level:4},{value:"Control Structures",id:"control-structures",level:2},{value:"Conditionals: if &amp; when",id:"conditionals-if--when",level:3},{value:"Loops",id:"loops",level:3},{value:"&#39;in&#39; checks &amp; ranges",id:"in-checks--ranges",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Extensions",id:"extensions",level:2},{value:"Extension Functions",id:"extension-functions",level:3},{value:"Calling Extension Functions from Java code",id:"calling-extension-functions-from-java-code",level:4},{value:"Examples from the Standard Library",id:"examples-from-the-standard-library",level:3},{value:"Formatting multi-line strings",id:"formatting-multi-line-strings",level:4},{value:"Custom extension functions",id:"custom-extension-functions",level:4},{value:"Calling Extensions",id:"calling-extensions",level:3}];function o(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"starting-up-with-kotlin",children:"Starting up with Kotlin"})}),"\n",(0,l.jsx)(e.h2,{id:"from-java-to-kotlin",children:"From Java to Kotlin"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"The Kotlin code is compiled to Java bytecode."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Java to Kotlin converter tool is available in IntelliJ"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Adding a ",(0,l.jsx)(e.code,{children:"data"})," modifier to a class automatically generates several methods for it:"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:"equals"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:"hashCode"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:"toString"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Example of data class:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"data class Person(val name: String, val age: Int)\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["No need to use ",(0,l.jsx)(e.code,{children:"new"})," keyword in Kotlin"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'val person = Person("Alice", 27)\nprintln(person.name)\n'})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Kotlin syntax helps reduce redundancy."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Example of ",(0,l.jsx)(e.code,{children:"updateWeather"})," function in Kotlin:"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'fun updateWeather(degrees: Int){\n    // Using Pair shortcut syntax\n    val(description: String, color: Color) =\n        if(degrees < 10){\n            Pair("cold", BLUE)\n        } else if( degrees < 25) {\n            Pair("mild", ORANGE)\n        } else {\n            Pair("hot", RED)\n        }\n    ...\n}\n\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Could simplify it further by removing the data types because Kotlin can infer it."}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'fun updateWeather(degrees: Int){\n  // Using Pair shortcut syntax\n  val(description, color) =\n      if(degrees < 10){\n          Pair("cold", BLUE)\n      } else if( degrees < 25) {\n          Pair("mild", ORANGE)\n      } else {\n          Pair("hot", RED)\n      }\n  ...\n}\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Could simplify it further by using ",(0,l.jsx)(e.code,{children:"when"})," instead of ",(0,l.jsx)(e.code,{children:"if"}),":"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'  fun updateWeather(degrees: Int){\n      // Using Pair shortcut syntax and when clause\n      val(description, color) = when {\n          degrees < 10 -> Pair("cold", BLUE)\n          degrees < 25 -> Pair("mild", ORANGE)\n          else -> Pair("hot", RED)\n      }\n      ...\n  }\n\n'})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Could alternatively use ",(0,l.jsx)(e.code,{children:"to"})," instead of ",(0,l.jsx)(e.code,{children:"Pair"}),":"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'  fun updateWeather(degrees: Int){\n      // Using Pair shortcut syntax and when clause\n      val(description, color) = when {\n          degrees < 10 -> "cold" to BLUE\n          degrees < 25 -> "mild" to ORANGE\n          else -> "hot" to RED\n      }\n      ...\n  }\n\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Does the automatic Java to Kotin Converter always produce the idiomatic Kotlin code?"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No, it doesn't"}),"\n",(0,l.jsx)(e.li,{children:'The Java code likely will look very "Java" in the Kotlin version.'}),"\n",(0,l.jsx)(e.li,{children:'You need to be immersed in Kotlin syntax to recognize how to manually reduce redundancies or to use "prettier" Kotlin syntax.'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"basics",children:"Basics"}),"\n",(0,l.jsx)(e.h3,{id:"hello-world-example",children:'"Hello, world" Example'}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Hello World:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'package intro\n\nfun main() {\n    val name = "Kotlin"\n    println("Hello, $name!")\n}\n'})}),"\n",(0,l.jsx)(e.admonition,{type:"info",children:(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["The ",(0,l.jsx)(e.code,{children:"main"})," function can go with or without arguments","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Example with argument:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"  fun main(args: Array<String>)\n"})}),"\n"]}),"\n"]})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"main"})," with argument Example:"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'package intro\n\nfun main(args: Array<String>){\n    val name = if(args.size > 0) args[0] else "Kotlin"\n    println("Hello, $name!")\n}\n\n'})}),"\n",(0,l.jsx)(e.admonition,{type:"note",children:(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["An ",(0,l.jsx)(e.code,{children:"Array<String>"})," in kotlin is the same array as in java."]}),"\n",(0,l.jsxs)(e.li,{children:["In Kotlin, ",(0,l.jsx)(e.code,{children:"if"})," ",(0,l.jsx)(e.code,{children:"else"})," clauses are expressions which can be assigned to a variable or returned in a function as shown above."]}),"\n",(0,l.jsxs)(e.li,{children:["String templates utilize the ",(0,l.jsx)(e.code,{children:"$"})," sign next to a variable name to insert a value inside a string literal."]}),"\n"]})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"String templates work for variables and functions:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:'"String Text Here: $variable"'})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:'"String Text Here: ${functionCall(...)}"'})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"What will be printed if no arguments are passed?"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'fun main(args: Array<String>) {\n    println("Hello, ${args.getOrNull(0)}!")\n}\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"Hello, null!"})," will be printed"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"What will be printed?"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'fun foo(): String {\n    println("Calculating foo...")\n    return "foo"\n}\n\nfun main(args: Array<String>){\n    println("First ${foo()}, second ${foo()}")\n}\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"This will be printed:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"  Calculating foo...\n  Calculating foo...\n  First foo, second foo\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h3,{id:"variables",children:"Variables"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["An assigned-once and read-only variable will be denoted with ",(0,l.jsx)(e.code,{children:"val"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["This is similar to a ",(0,l.jsx)(e.code,{children:"final"})," variable in java."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["A mutable variable will be denoted with ",(0,l.jsx)(e.code,{children:"var"})]}),"\n",(0,l.jsxs)(e.li,{children:["Types are inferred in Kotlin:","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:'val greeting: String = "Hi!"'})," does not need to explicitly say it is a String."]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:'val greeting = "Hi!"'})," knows it is a String type."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["Why doesn't the following code compile?","\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'var string = 1;\nstring = "abc";\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Because you can't assign a string literal to a variable of Int type."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["Is it possible to modify an object stored in val?","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Yes"}),"\n",(0,l.jsx)(e.li,{children:"There are no additional constraints."}),"\n",(0,l.jsxs)(e.li,{children:["You can easily modify an object stored in ",(0,l.jsx)(e.code,{children:"val"})," as in Java."]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"val"})," is an immutable reference which doesn't say anything about the content that is stored."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["Example to demonstrate ",(0,l.jsx)(e.code,{children:"val"})," is a read-only reference and not an object.","\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'val languages = mutableListOf("Java")\nlanguages.add("Kotlin")\n'})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["Why doesn't the following code compile?","\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'val list = listOf("Java")\nlist.add("Kotlin")\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Because you can't modify a read-only list."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.admonition,{type:"tip",children:(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Don't omit types"}),"\n",(0,l.jsx)(e.li,{children:"Specify the types of a variable explicitly to improve clarity."}),"\n"]})}),"\n",(0,l.jsx)(e.h3,{id:"functions",children:"Functions"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"\nfun max(a: Int, b: Int): Int {\n  return if(a > b) a else b\n}\n\n"})}),"\n",(0,l.jsx)(e.p,{children:"is equivalent to:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"\nfun max(a: Int, b: Int) = if (a > b) a else b\n\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"Unit"})," is very similar to ",(0,l.jsx)(e.code,{children:"void"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["You don't really need to specify ",(0,l.jsx)(e.code,{children:"Unit"})," as the return type if you don't want to."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"\nfun displayMax(a: Int, b: Int): Unit {\n  println(max(a,b))\n}\n\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Is it possible to call a top-level function from Java? If yes, how?","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["You call it as a ",(0,l.jsx)(e.strong,{children:"static"})," function of the class, which name corresponds to the file name."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"calling-a-top-level-function-from-java",children:"Calling a top-level function from Java"}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"MyFile.kt"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"package intro\n\nfun foo() = 0\n"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"UsingFood.java"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"package other;\n\nimport intro.MyFileKt;\n\npublic class UsingFoo {\n  public static void main(String[] args){\n    MyFileKt.foo();\n  }\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"named--default-arguments",children:"Named & default arguments"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"What will be printed?"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:'println(\n  listOf("a", "b", "c").joinToString(\n    separator = "",\n    prefix = "(",\n    postfix = ")"\n  )\n);\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Output: ",(0,l.jsx)(e.code,{children:"(abc)"})]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"default-values",children:"Default Values"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"\nfun displaySeperator(character: Char = '*', size: Int = 10){\n  ...\n}\n\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Could assign a value inside the function parameters to specify the default values."}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"named-arguments",children:"Named arguments"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Suppose you only want to specify the second parameter and keep the first one at its current default value."}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"\nfun displaySeperator(character: Char = '*', size: Int = 10){\n  ...\n}\n\n...\n\ndisplaySepartor(size = 5)\n\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["The output will be: ",(0,l.jsx)(e.code,{children:"*****"})]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"what-will-be-printed",children:"What will be printed?"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"\nfun displaySeperator(character: Char = '*', size: Int = 10){\n  repeat(size) {\n    print(character)\n  }\n}\n\ndisplaySepartor(3, '5')\n\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Answer: the code won't compile."}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"control-structures",children:"Control Structures"}),"\n",(0,l.jsx)(e.h3,{id:"conditionals-if--when",children:"Conditionals: if & when"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Ternary operator does not exist in Kotlin"}),"\n",(0,l.jsx)(e.li,{children:"Just use the if expression"}),"\n",(0,l.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"val max = if(a > b) a else b\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"when expression:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'enum class Color {\n  BLUE, ORANGE, RED\n}\n\nfun getDescription(color: Color): String =\n  when(color){\n    BLUE -> "cold"\n    ORANGE -> "mild"\n    RED -> "hot"\n  }\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Checking multiple values at once Example:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'\nfun respondToInput(input: String) = when(input) {\n  // you can check mulitple values at once\n  "y", "yes" -> "Good Outcome"\n  "n", "no" -> "Bad Outcome"\n  else -> "I don\'t understand you"\n}\n\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Any expression can be used as a branch Condition"}),"\n",(0,l.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'\nfun mix(c1: Color, c2: Color) =\n  when (setOf(c1, c2)) {\n    setOf(RED, YELLOW) -> ORANGE\n    setOf(YELLOW, BLUE) -> GREEN\n    setOf(BLUE, VIOLET) -> INDIGO\n    else -> throw Exception("Dirty color")\n  }\n\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Checking types"}),"\n",(0,l.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"when(pet) {\n  is Cat -> pet.meow()\n  is Dog -> pet.woof()\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Capturing when subject in a variable"}),"\n",(0,l.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"when(val pet = getMyFavoritePet()) {\n  is Cat -> pet.meow()\n  is Dog -> pet.woof()\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["You should always replace if with when?","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"False"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h3,{id:"loops",children:"Loops"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"While loops:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"while(condition){\n  ...\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Do-while loops:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"\ndo{\n  ...\n} while(condition)\n\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"for loop:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'val list = listOf("a", "b", "c")\nfor (s in list){\n  print(s)\n}\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Iterating over map"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'val map = mapOf (1 to "one", 2 to "two", 3 to "three")\n\nfor((key, value) in map){\n  println("$key = $value")\n}\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Iterating over range"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"// including upper bound\nfor (i in 1..9){\n  print(i)\n}\n\n// excluding upper bound\nfor (i in 1 until 9){\n  print(i)\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Iterating over String"}),"\n",(0,l.jsxs)(e.li,{children:["Example:","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["The output will be: ",(0,l.jsx)(e.code,{children:"bcd"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'for (ch in "abc") {\n  print(ch + 1);\n}\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Rewrite the following java code into Kotlin:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"for(char c = '0'; c < '9'; c++){\n  System.out.print(c);\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Kotlin version:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"for(c in '0' until '9'){\n  print(c)\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"in-checks--ranges",children:"'in' checks & ranges"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"in"})," could be used to check if an item belongs in something."]}),"\n",(0,l.jsxs)(e.li,{children:["Example: ",(0,l.jsx)(e.code,{children:"c in 'a'..'z'"}),"\n",(0,l.jsx)(e.admonition,{type:"note",children:(0,l.jsx)(e.p,{children:"Both the lower and upper bound is checked."})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["Not ",(0,l.jsx)(e.code,{children:"in"})," a range Example:","\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"c !in '0'..'9'\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"in"})," as ",(0,l.jsx)(e.code,{children:"when"}),"-condition Example:","\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"fun recognize(c: Char) = when(c) {\n  in '0'..'9' -> \"It's a digit!\"\n  in 'a'..'z', in 'A'..'Z' -> \"It's a letter!\"\n  else -> \"I don't know...\"\n}\n"})}),"\n"]}),"\n",(0,l.jsx)(e.li,{children:"What will be printed?"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'println("Kotin" in "Java".."Scala")\nprintln("Kotlin" in setOf("Java", "Scala"))\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Answer: ",(0,l.jsx)(e.code,{children:"true false"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:'First one checks in alphabetical order. So, a word that starts with the letter \'K\' like "Kotlin" lies between the words "Java" and "Scala" in alphabetical order.'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h3,{id:"exceptions",children:"Exceptions"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"throw"})," is an expression"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'val percentage =\n  if(number in 0..100)\n    number\n  else\n    throw IllegalArgumentException(\n      "A percentage value must be" + "between 0 and 100: $number")\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"try"})," is an expression:"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"val number = try {\n  Integer.parseInt(string)\n} catch (e: NumberFormatException){\n  return\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"@Throws"})," annotation"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"@Throws(IOException::class)\nfun foo() {\n  throw IOException()\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Is there any difference between calling foo and bar from Java?"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"fun foo() {\n  throw IOException()\n}\n\n@Throws(IOException::class)\nfun bar() {\n  throw IOException()\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Answer: The code calling ",(0,l.jsx)(e.code,{children:"bar"})," compiles, but the code calling ",(0,l.jsx)(e.code,{children:"foo"})," doesn't compile."]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"extensions",children:"Extensions"}),"\n",(0,l.jsx)(e.h3,{id:"extension-functions",children:"Extension Functions"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["The time that the function extends is called a Receiver.","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["In the example below, ",(0,l.jsx)(e.code,{children:"String"})," is the receiver of the ",(0,l.jsx)(e.code,{children:"lastChar"})," function."]}),"\n",(0,l.jsx)(e.li,{children:"In the body of this function, we can access the receiver by this reference."}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"this"})," refers to ",(0,l.jsx)(e.code,{children:"String"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"fun String.lastChar() = this.get(this.length - 1)\n"})}),"\n",(0,l.jsxs)(e.admonition,{type:"info",children:[(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.code,{children:"this"})," can actually be omitted, resulting in this alternative:"]}),(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"fun String.lastChar() = get(length - 1)\n"})})]}),"\n",(0,l.jsxs)(e.admonition,{type:"note",children:[(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"You need to import the extension function to use it."}),"\n"]}),(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'import com.example.util.lastChar\nval c: Char = "abc".lastChar()\n\n'})})]}),"\n",(0,l.jsx)(e.h4,{id:"calling-extension-functions-from-java-code",children:"Calling Extension Functions from Java code"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Extension functions are like static functions in java"}),"\n",(0,l.jsx)(e.li,{children:"Example java code:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'import static StringExtensionKt.lastChar;\nchar c = lastChar("abc");\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"How many arguments does the repeat function have if you call it from Java?"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"fun String.repeat(n: Int): String {\n  val sb = StringBuilder(n * length) for (i in 1..n) {\n    sb.append(this)\n  }\n  return sb.toString()\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Answer: ",(0,l.jsx)(e.strong,{children:"2"})]}),"\n",(0,l.jsx)(e.li,{children:"Is it possible to call a private member of String inside an extension function to String?"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"fun String.lastChar() = get(length - 1)\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Answer: ",(0,l.jsx)(e.strong,{children:"no"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"You can't call a private member from a static function of another class in java."}),"\n",(0,l.jsx)(e.li,{children:"Kotlin extension functions are regular static functions defined in a separate auxiliary class."}),"\n",(0,l.jsx)(e.li,{children:"You cannot call private members from extensions."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h3,{id:"examples-from-the-standard-library",children:"Examples from the Standard Library"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"No Kotlin SDK"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Just JDK + Extensions","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Benefits:","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"small runtime jar"}),"\n",(0,l.jsx)(e.li,{children:"easy Java interop"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["An example of an Extension function: ",(0,l.jsx)(e.code,{children:"until"})]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"infix fun Int.until(to: Int): IntRange\n\n//to call it, two different syntaxes:\n1.until(10)\n1 until 10\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"formatting-multi-line-strings",children:"Formatting multi-line strings"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Indentations can be caught in multi-line strings","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["The code below uses the ",(0,l.jsx)(e.code,{children:"trimMargin"})," extension to address that."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'val q = """To Code,\n    | or not to code?..""".trimMargin()\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Thus, the output becomes:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"To Code,\nor not to code?..\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Conversion to numbers:","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Example: ",(0,l.jsx)(e.code,{children:'"123".toInt()'})]}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.code,{children:'"1e-10".toDouble()'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h4,{id:"custom-extension-functions",children:"Custom extension functions"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"You can create your own extension functions:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'fun <T> T.eq(other: T?): Boolean {\n    return this == other\n}\n\nval a = "Hello"\nval b = "Hello"\nval c = "World"\n\nprintln(a.eq(b)) // true\nprintln(a.eq(c)) // false\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["What is the type of ",(0,l.jsx)(e.code,{children:"'a' to 1.0"}),"?","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Answer: ",(0,l.jsx)(e.code,{children:"Pair<Char, Double>"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["Write ",(0,l.jsx)(e.code,{children:"Sum"})," as an extension function."]}),"\n",(0,l.jsx)(e.li,{children:"Answer:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"fun List<Int>.sum(): Int {\n  var total = 0\n  for(i in this){\n    total += i\n  }\n  return total\n}\n\nfun main(args: Array<String>){\n  val ls = listOf(1, 2, 3)\n  val output = ls.sum()\n  println(output)\n}\n"})}),"\n",(0,l.jsx)(e.h3,{id:"calling-extensions",children:"Calling Extensions"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"What will be printed?"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'open class Parent\nclass Child: Parent()\n\nfun Parent.foo() = "parent"\nfun Child.foo() = "child"\n\nfun main(args: Array<String>) {\n  val parent: Parent = Child()\n  println(parent.foo())\n}\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Answer: ",(0,l.jsx)(e.code,{children:"parent"})]}),"\n",(0,l.jsx)(e.li,{children:"What will be printed?"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:"fun String.get(index: Int) = '*'\n\nfun main(args: Array<String>) {\n  println(\"abc\".get(1))\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["Answer: ",(0,l.jsx)(e.code,{children:"b"})]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(o,{...n})}):o(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>a});var l=i(6540);const s={},r=l.createContext(s);function t(n){const e=l.useContext(r);return l.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),l.createElement(r.Provider,{value:e},n.children)}}}]);