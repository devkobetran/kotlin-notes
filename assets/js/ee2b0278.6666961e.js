"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[5142],{7793:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});var l=s(4848),i=s(8453);const r={sidebar_position:3},a="Properties, OOP, Conventions",t={id:"tutorial/properties-oop-conventions",title:"Properties, OOP, Conventions",description:"Properties",source:"@site/docs/tutorial/properties-oop-conventions.md",sourceDirName:"tutorial",slug:"/tutorial/properties-oop-conventions",permalink:"/kotlin-notes/docs/tutorial/properties-oop-conventions",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/kotlin-notes/docs/tutorial/properties-oop-conventions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Nullability & Functional Programming",permalink:"/kotlin-notes/docs/tutorial/nullability-functional-programming"},next:{title:"Sequences, Lambdas with Receiver, Types",permalink:"/kotlin-notes/docs/tutorial/sequences-lambdas-with-receivers-types"}},c={},o=[{value:"Properties",id:"properties",level:2},{value:"Fields",id:"fields",level:3},{value:"Property in interface",id:"property-in-interface",level:3},{value:"Extension Properties",id:"extension-properties",level:3},{value:"Lazy Property",id:"lazy-property",level:3},{value:"lateinit",id:"lateinit",level:3},{value:"Object Oriented Programming",id:"object-oriented-programming",level:2},{value:"Module",id:"module",level:3},{value:"Definitions",id:"definitions",level:3},{value:"Constructors",id:"constructors",level:3},{value:"Concise primary constructor",id:"concise-primary-constructor",level:4},{value:"Full primary constructor syntax",id:"full-primary-constructor-syntax",level:4},{value:"Changing visibility of a constructor",id:"changing-visibility-of-a-constructor",level:4},{value:"Secondary Constructors",id:"secondary-constructors",level:4},{value:"Different syntax for inheritence",id:"different-syntax-for-inheritence",level:3},{value:"Same syntax for <code>extends</code> &amp; <code>implements</code>",id:"same-syntax-for-extends--implements",level:4},{value:"What will be printed?",id:"what-will-be-printed",level:4},{value:"Class Modifiers",id:"class-modifiers",level:3},{value:"enum Class",id:"enum-class",level:4},{value:"enum class with Properties",id:"enum-class-with-properties",level:4},{value:"data modifier",id:"data-modifier",level:4},{value:"What will be printed?",id:"what-will-be-printed-1",level:4},{value:"Properties in primary constructor",id:"properties-in-primary-constructor",level:4},{value:"Sealed Class",id:"sealed-class",level:4},{value:"inner modifier",id:"inner-modifier",level:4},{value:"Class Delegation",id:"class-delegation",level:3},{value:"Objects",id:"objects",level:3},{value:"object expressions",id:"object-expressions",level:4},{value:"No <code>static</code> keyword",id:"no-static-keyword",level:4},{value:"Which line will not compile?",id:"which-line-will-not-compile",level:4},{value:"Nested object",id:"nested-object",level:4},{value:"Constants",id:"constants",level:3},{value:"Compile time Constants",id:"compile-time-constants",level:4},{value:"@JvmField",id:"jvmfield",level:4},{value:"Generics",id:"generics",level:3},{value:"Generic Functions",id:"generic-functions",level:4},{value:"Nullable Generic Argument",id:"nullable-generic-argument",level:4},{value:"Can element be nullable in the example below?",id:"can-element-be-nullable-in-the-example-below",level:4},{value:"Non-nullable upper bound",id:"non-nullable-upper-bound",level:4},{value:"Comparable upper bound",id:"comparable-upper-bound",level:4},{value:"Using @JvmName",id:"using-jvmname",level:4},{value:"OOP Design of Kotlin",id:"oop-design-of-kotlin",level:3},{value:"Conventions",id:"conventions",level:2},{value:"Operator Overloading",id:"operator-overloading",level:3},{value:"Unary operations",id:"unary-operations",level:4},{value:"Assignment Operations",id:"assignment-operations",level:4},{value:"What will be printed?",id:"what-will-be-printed-2",level:4},{value:"Comparisons",id:"comparisons",level:3},{value:"Equality Check",id:"equality-check",level:3},{value:"Accessing Elements by index",id:"accessing-elements-by-index",level:3},{value:"Which function allows using the following syntax for your custom class?",id:"which-function-allows-using-the-following-syntax-for-your-custom-class",level:4},{value:"Which elements can be compared using comparison operations?",id:"which-elements-can-be-compared-using-comparison-operations",level:4},{value:"Operator overloading (When not to use it)",id:"operator-overloading-when-not-to-use-it",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"properties-oop-conventions",children:"Properties, OOP, Conventions"})}),"\n",(0,l.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class Contact(\n    val name: String,\n    val address: String\n)\n\n// call the variable directly\ncontact.address\n"})}),"\n",(0,l.jsx)(n.h3,{id:"fields",children:"Fields"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"You can access field only inside accessors"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'class StateLogger {\n    var state = false\n        set(value) {\n            println("state has changed: " + "$field -> $value")\n            field = value\n        }\n}\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["No mentioning of ",(0,l.jsx)(n.code,{children:"field"})," in customer accessors"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"...\n\nclass StateLogger{\n    private var boolState = false\n\n    var state: State\n        get() = if(boolState) ON else OFF\n        ...\n}\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"You always use property instead of getter and setters"}),"\n",(0,l.jsx)(n.li,{children:"Changing visibility of a setter"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"// change visibility of the setter but use its default implementation\nclass LengthCounter {\n    var counter: Int = 0\n        private set\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"property-in-interface",children:"Property in interface"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"interface User {\n    val nickname: String\n}\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Which property is calculated on each access?"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"interface User {\n  val nickname: String\n}\n\nclass FacebookUser(val accountId: Int) : User {\n  override val nickname = getFacebookName(accountId)\n}\n\nclass SubscribingUser(val email: String) : User {\n  override val nickname: String\n    get() = email.substringBefore('@')\n}\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Answer: ",(0,l.jsx)(n.code,{children:"SubscribingUser.nickname"})]}),"\n",(0,l.jsx)(n.li,{children:"Open property can't be used in smart casts"}),"\n",(0,l.jsx)(n.li,{children:"Thus, the below code is correct approach:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"interface Session {\n    val user: User\n}\n\nfun analyzeUserSession(session: Session){\n    val user = session.user\n    if(user is FacebookUser){\n        println(user.accountId)\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"extension-properties",children:"Extension Properties"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"val String.lastIndex: Int\n    get() = this.length - 1\n\nval String.indices: IntRange\n    get() = 0..lastIndex\n"})}),"\n",(0,l.jsx)(n.h3,{id:"lazy-property",children:"Lazy Property"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'val lazyValue: String by lazy {\n    println("computed")\n    "Hello"\n}\n\nfun main(args: Array<String>){\n    println(lazyValue)\n    println(lazyValue)\n}\n\n// here is what is printed\n// computed\n// Hello\n// Hello\n'})}),"\n",(0,l.jsx)(n.h3,{id:"lateinit",children:"lateinit"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Use ",(0,l.jsx)(n.code,{children:"lateinit"})," value as a value of a non-nullable type, so no need to use ternary ",(0,l.jsx)(n.code,{children:"?"})," when referring to it anymore.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["i.e. ",(0,l.jsx)(n.code,{children:"myData?.foo"})," is not used. Just use ",(0,l.jsx)(n.code,{children:"myData.foo"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'class KotlinActivity: Activity() {\n    lateinit var myData: MyData\n\n    override fun onCreate(savedInstanceState: Bundle?){\n        super.onCreate(savedInstanceState)\n\n        myData = intent.getParcelableExtra("MY_DATA")\n    }\n    ...myData.foo\n}\n'})}),"\n",(0,l.jsx)(n.admonition,{type:"warning",children:(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["lateinit variables cannot be ",(0,l.jsx)(n.code,{children:"val"}),". It has to be ",(0,l.jsx)(n.code,{children:"var"})]}),"\n",(0,l.jsxs)(n.li,{children:["lateinit variables cannot be ",(0,l.jsx)(n.code,{children:"null"})]}),"\n",(0,l.jsx)(n.li,{children:"lateinit variables cannot be primitive type"}),"\n"]})}),"\n",(0,l.jsx)(n.h2,{id:"object-oriented-programming",children:"Object Oriented Programming"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Any declaration is ",(0,l.jsx)(n.code,{children:"public"})," and ",(0,l.jsx)(n.code,{children:"final"})," by default"]}),"\n",(0,l.jsxs)(n.li,{children:["To make something non-final, mark it as ",(0,l.jsx)(n.code,{children:"open"})]}),"\n",(0,l.jsxs)(n.li,{children:["There is no package private visibility.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["It's called ",(0,l.jsx)(n.code,{children:"internal"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"module",children:"Module"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["a set of Kotlin files compiled together","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Maven"}),"\n",(0,l.jsx)(n.li,{children:"Gradle"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"definitions",children:"Definitions"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"final"})," modifier means cannot be overridden."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"open"})," modifier means can be overriden"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"abstract"})," modifier means must be overriden (can't have an implementation)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"override"})," modifier means overrides a member in a superclass or interface (mandatory to do)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"public"})," class member or top-level declaration is visible everywhere."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"internal"})," class member or top-level declaration is visible in the module."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"protected"})," class member is visible in the class and its subclasses"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"private"})," class member is visible in the class only"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"private"})," top-level declaration is visible in the same file."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"constructors",children:"Constructors"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class A\n\nval a = A()\n"})}),"\n",(0,l.jsx)(n.h4,{id:"concise-primary-constructor",children:"Concise primary constructor"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class Person(val name: String, val age: Int)\n"})}),"\n",(0,l.jsx)(n.h4,{id:"full-primary-constructor-syntax",children:"Full primary constructor syntax"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class Person(name: String){\n    val name: String\n\n    init {\n        this.name = name\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"is equivalent to:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class Person(val name: String)\n"})}),"\n",(0,l.jsx)(n.h4,{id:"changing-visibility-of-a-constructor",children:"Changing visibility of a constructor"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class InternalComponent\ninternal constructor(name: String){\n    ...\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"secondary-constructors",children:"Secondary Constructors"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class Rectangle(val height: Int, val width: Int){\n    constructor(side: Int) : this(side, side) {...}\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"different-syntax-for-inheritence",children:"Different syntax for inheritence"}),"\n",(0,l.jsxs)(n.h4,{id:"same-syntax-for-extends--implements",children:["Same syntax for ",(0,l.jsx)(n.code,{children:"extends"})," & ",(0,l.jsx)(n.code,{children:"implements"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"interface Base\nclass BaseImpl: Base\n\nopen class Parent\nclass Child: Parent()\n"})}),"\n",(0,l.jsx)(n.h4,{id:"what-will-be-printed",children:"What will be printed?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"open class Parent {\n    open val foo = 1\n    init {\n        println(foo)\n    }\n}\n\nclass Child: Parent() {\n    override val foo = 2\n}\n\nfun main() {\n    Child()\n}\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Answer: 0"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"class-modifiers",children:"Class Modifiers"}),"\n",(0,l.jsx)(n.h4,{id:"enum-class",children:"enum Class"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"represents enumeration"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'import Color.*\n\nenum class Color{\n    BLUE, ORANGE, RED\n}\n\nfun getDescription(color: Color) =\n    when (color) {\n        BLUE -> "cold"\n        ORANGE -> "mild"\n        RED -> "hot"\n    }\n'})}),"\n",(0,l.jsx)(n.h4,{id:"enum-class-with-properties",children:"enum class with Properties"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"enum class Color(val r: Int, val g: Int, val b: Int){\n    BLUE(0, 0, 255), ORANGE(255, 165, 0), RED(255, 0, 0);\n\n    fun rgb() = (r * 256 + g) * 256 + b\n}\n\nprintln(BLUE.r) // 0\nprintln(BLUE.rgb()) //255\n"})}),"\n",(0,l.jsx)(n.h4,{id:"data-modifier",children:"data modifier"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Generates useful methods:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"equals"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"hashCode"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"copy"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"toString"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"what-will-be-printed-1",children:"What will be printed?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class Foo(val first: Int, val second: Int)\ndata class Bar(val first: Int, val second: Int)\n\nval f1 = Foo(1, 2)\nval f2 = Foo(1, 2)\nprintln(f1 == f2)\n\nval b1 = Bar(1, 2)\nval b2 = Bar(1, 2)\nprintln(b1 == b2)\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Answer: ",(0,l.jsx)(n.code,{children:"false true"})]}),"\n",(0,l.jsx)(n.li,{children:"In the Foo, you are checking reference equality"}),"\n",(0,l.jsx)(n.li,{children:"In the Bar, since it is a data class, you are comparing content so it's true."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"properties-in-primary-constructor",children:"Properties in primary constructor"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'data class User(val email: String){\n    var nickname: String? = null\n}\n\nval user1 = User("voldemort@gmail.com")\nuser1.nickname = "Voldemort"\n\nval user2 = User("voldemort@gmail.com")\nuser2.nickname = "Hello"\n\n// user1 == user2 is true\n// because only the email values are compared and not the nicknames\n'})}),"\n",(0,l.jsx)(n.h4,{id:"sealed-class",children:"Sealed Class"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Restricts class hierarchy: all subclasses must be located in the same file"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"sealed class Expr\nclass Num(val value: Int): Expr()\nclass Sum(val left: Expr, val right: Expr): Expr()\n\nfun eval(e: Expr): Int = when (e) {\n    is Num -> e.value\n    is Sum -> eval(e.left) + eval(e.right)\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"inner-modifier",children:"inner modifier"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The inner class stores a reference to an outer class."}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class A {\n    class B\n    inner class C{\n        ...this@A...\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"class-delegation",children:"Class Delegation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class Controller(\n    repository: Repository,\n    logger: Logger\n) : Repository by repository, Logger by logger\n"})}),"\n",(0,l.jsx)(n.h3,{id:"objects",children:"Objects"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"object = singleton"})}),"\n",(0,l.jsx)(n.h4,{id:"object-expressions",children:"object expressions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"window.addMouseListener(\n  object : MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) {\n      // ...\n    }\n    override fun mouseEntered(e: MouseEvent) {\n      // ...\n    }\n  }\n)\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"An object expression is not a singleton."}),"\n",(0,l.jsx)(n.li,{children:"A new instance of object expression is created for each call."}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"companion object"}),": special object inside a class","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"it could implement an interface"}),"\n",(0,l.jsx)(n.li,{children:"can be a receiver of extension function"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h4,{id:"no-static-keyword",children:["No ",(0,l.jsx)(n.code,{children:"static"})," keyword"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:['Declare "static" members:',"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"at the top level"}),"\n",(0,l.jsx)(n.li,{children:"inside Objects"}),"\n",(0,l.jsx)(n.li,{children:"inside companion objects"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"which-line-will-not-compile",children:"Which line will not compile?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class C {\n  companion object {\n    @JvmStatic fun foo() {}\n    fun bar() {}\n  }\n}\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"// Java\nC.foo();           //#1\nC.bar();           //#2\nC.Companion.foo(); //#3\nC.Companion.bar(); //#4\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Answer: line 2 because you try to access bar as a static function. By default, it cannot be accessed like that."}),"\n",(0,l.jsx)(n.li,{children:"Is it possible to declare an inner object?"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class A {\n  inner object B\n}\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Answer: No. The compiler gives you an error because inner is not applicable to object."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"nested-object",children:"Nested object"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This is allowed:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class A {\n    object B\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"constants",children:"Constants"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"const"})," for primitive types and String"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"@JvmField"})," eliminates accessors","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"exposes a Kotlin property as a field in Java"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"compile-time-constants",children:"Compile time Constants"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"const val answer = 42\n"})}),"\n",(0,l.jsx)(n.h4,{id:"jvmfield",children:"@JvmField"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"object A {\n    @JvmField\n    val prop = MyClass() //static field generated\n}\n\nclass B {\n    @JvmField\n    val prop = MyClass() //regular field generated\n}\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Which declaration will expose answer as static field?"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"// Answer:\n\n@JvmField\nval answer\n\nconst val answer = 42\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Which declaration(s) will inline the value of answer in the resulting bytecode?"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"object SuperComputer {\n  val answer = 42\n}\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Answer: ",(0,l.jsx)(n.code,{children:"const val answer = 42"}),", the const achieves this."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Which declaration(s) will expose a top-level property as static field when used from Java?"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"val answer = 42\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Answer:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"// Answer:\n\n@JvmField\nval answer\n\nconst val answer = 42\n"})}),"\n",(0,l.jsx)(n.h3,{id:"generics",children:"Generics"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"interface List<E>{\n  fun get(index: Int): E\n}\n\nfun foo(ints:List<Int>) {...}\n\nfun bar(strings: List<String>) {...}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"generic-functions",children:"Generic Functions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"fun <T> List<T>.filter(predicate: (T) -> Boolean): List<T>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"nullable-generic-argument",children:"Nullable Generic Argument"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"fun <T> List<T>.firstOrNull(): T?\n\nval ints = listOf(1, 2, 3)\n\nval i: Int? = ints.firstOrNull()  // output: 1\n\nval j: Int? = listOf<Int>().firstOrNull() // null\n\nval k: Int? = listOf(null, 1).firstOrNull() //null\n"})}),"\n",(0,l.jsx)(n.h4,{id:"can-element-be-nullable-in-the-example-below",children:"Can element be nullable in the example below?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"fun <T> foo(list: List<T>) {\n    for (element in list) {\n\n    }\n}\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Answer: yes. You can pass a list of nullable elements at an argument, so the element can be null."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"non-nullable-upper-bound",children:"Non-nullable upper bound"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"fun <T: Any> foo(list: List<T>){\n  for(element in list){\n\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"comparable-upper-bound",children:"Comparable upper bound"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"fun<T: Comparable<T>> max(first: T, second: T): T {\n  return if(first > second) first else second\n}\n\nmax(1, 3) // output: 3\n"})}),"\n",(0,l.jsx)(n.h4,{id:"using-jvmname",children:"Using @JvmName"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'fun List<Int>.average(): Double {...}\n\n// Modifies the file name under the hood and modifies the name of the function at the bytecode\n@JvmName("averageOfDouble")\nfun List<Double>.average(): Double {...}\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The two functions above are considered two different functions."}),"\n",(0,l.jsx)(n.li,{children:'In Java, you call the the second function as "averageOfDouble"'}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"oop-design-of-kotlin",children:"OOP Design of Kotlin"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"public"})," is default and very permissive"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"final"})," is the most restrictive: no one can override this","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"enables smart casts"}),"\n",(0,l.jsx)(n.li,{children:"e.g. have a val that is a member in a cast"}),"\n",(0,l.jsxs)(n.li,{children:["If it's ",(0,l.jsx)(n.code,{children:"open"}),", you can't smart cast it."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"conventions",children:"Conventions"}),"\n",(0,l.jsx)(n.h3,{id:"operator-overloading",children:"Operator Overloading"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"a + b"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"a.plus(b)"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"operator fun Point.plus(other: Point): Point {\n  return Point(x + other.x, y + other.y)\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"unary-operations",children:"Unary operations"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-a"})," is the same as ",(0,l.jsx)(n.code,{children:"a.unaryMinus()"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"operator fun Point.unaryMinus() = Point(-x, -y)\n"})}),"\n",(0,l.jsx)(n.h4,{id:"assignment-operations",children:"Assignment Operations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"a += b;\n"})}),"\n",(0,l.jsx)(n.p,{children:"can be the same as"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"a = a.plus(b);\na.plusAssign(b);\n"})}),"\n",(0,l.jsx)(n.h4,{id:"what-will-be-printed-2",children:"What will be printed?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"val list1 = listOf(1, 2, 3)\nvar list2 = list1\nlist2 += 4\nprintln(list1)\nprintln(list2)\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Answer:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"[1, 2, 3]\n\n[1, 2, 3, 4]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"comparisons",children:"Comparisons"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"a >= b"})," is about the same as ",(0,l.jsx)(n.code,{children:"a.compareTo(b) >= 0"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"equality-check",children:"Equality Check"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"s1 == s2"})," is same as ",(0,l.jsx)(n.code,{children:"s1.equals(s2)"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"accessing-elements-by-index",children:"Accessing Elements by index"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"x[a, b]"})," is same as ",(0,l.jsx)(n.code,{children:"x.get(a, b)"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"x[a, b] = c"})," is same as ",(0,l.jsx)(n.code,{children:"x.set(a, b, c)"})]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"which-function-allows-using-the-following-syntax-for-your-custom-class",children:"Which function allows using the following syntax for your custom class?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"val board : Board = ...\nboard[1, 2] = 'x'\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Answer:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"operator fun Board.set(x: Any, y: Any, value: Char) { ... }\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["You need the ",(0,l.jsx)(n.code,{children:"operator"})," keyword to make this index work."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"which-elements-can-be-compared-using-comparison-operations",children:"Which elements can be compared using comparison operations?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"x < y\nx >= y\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Answer:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Strings"})}),"\n",(0,l.jsxs)(n.li,{children:["elements implementing ",(0,l.jsx)(n.code,{children:"Comparable"})," interface"]}),"\n",(0,l.jsxs)(n.li,{children:["elements that define member or extenson ",(0,l.jsx)(n.code,{children:"operator"})," function ",(0,l.jsx)(n.code,{children:"compareto"})," (with the right signature)"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Implement 'equals2' without using '==' so that it was equivalent to 'equals1'. You can call 'equals()' directly and use the reference equality operator '==='."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'data class Value(val s: String)\n\nfun equals1(v1: Value?, v2: Value?): Boolean {\n    return v1 == v2\n}\n\nfun equals2(v1: Value?, v2: Value?): Boolean {\n    if (v1 === v2) return true // Reference equality check\n    if (v1 == null || v2 == null) return false // One is null and the other is not\n    return v1.equals(v2) // Calls the equals() method\n}\n\nfun main(args: Array<String>) {\n    println(equals1(Value("abc"), Value("abc")) == true) // should be true\n    println(equals1(Value("abc"), null) == false) // should be false\n    println(equals1(null, Value("abc")) == false) // should be false\n    println(equals1(null, null) == true) // should be true\n\n    println(equals2(Value("abc"), Value("abc")) == true) // should be true\n    println(equals2(Value("abc"), null) == false) // should be false\n    println(equals2(null, Value("abc")) == false) // should be false\n    println(equals2(null, null) == true) // should be true\n}\n\n'})}),"\n",(0,l.jsx)(n.h3,{id:"operator-overloading-when-not-to-use-it",children:"Operator overloading (When not to use it)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"You cannot invent your own operator"}),"\n",(0,l.jsx)(n.li,{children:"You cannot alter precedence of existing operators"}),"\n",(0,l.jsx)(n.li,{children:"Only Allowed to overload a predefined set of operators"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var l=s(6540);const i={},r=l.createContext(i);function a(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);