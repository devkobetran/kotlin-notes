"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[831],{4239:(n,e,l)=>{l.r(e),l.d(e,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var i=l(4848),s=l(8453);const a={sidebar_position:2},t="Nullability & Functional Programming",r={id:"tutorial/nullability-functional-programming",title:"Nullability & Functional Programming",description:"Nullable types",source:"@site/docs/tutorial/nullability-functional-programming.md",sourceDirName:"tutorial",slug:"/tutorial/nullability-functional-programming",permalink:"/kotlin-notes/docs/tutorial/nullability-functional-programming",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/kotlin-notes/docs/tutorial/nullability-functional-programming.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Starting up with Kotlin",permalink:"/kotlin-notes/docs/tutorial/starting-up-with-kotlin"},next:{title:"Properties, OOP, Conventions",permalink:"/kotlin-notes/docs/tutorial/properties-oop-conventions"}},c={},d=[{value:"Nullable types",id:"nullable-types",level:2},{value:"Dealing with Nullable Types",id:"dealing-with-nullable-types",level:3},{value:"Nullability operators",id:"nullability-operators",level:3},{value:"Making Null Pointer Exception Explicit",id:"making-null-pointer-exception-explicit",level:3},{value:"Nullable types under the hood",id:"nullable-types-under-the-hood",level:2},{value:"List of nullable elements vs nullable List",id:"list-of-nullable-elements-vs-nullable-list",level:3},{value:"Safe Casts",id:"safe-casts",level:3},{value:"Functional Programming",id:"functional-programming",level:2},{value:"Lambdas",id:"lambdas",level:3},{value:"Common Operations on collections",id:"common-operations-on-collections",level:3},{value:"Filter",id:"filter",level:4},{value:"Map",id:"map",level:4},{value:"any",id:"any",level:4},{value:"all",id:"all",level:4},{value:"none",id:"none",level:4},{value:"find",id:"find",level:4},{value:"firstOrNull",id:"firstornull",level:4},{value:"count",id:"count",level:4},{value:"partition",id:"partition",level:4},{value:"groupby",id:"groupby",level:4},{value:"associateBy",id:"associateby",level:4},{value:"associate",id:"associate",level:4},{value:"zip",id:"zip",level:4},{value:"zipWithNext",id:"zipwithnext",level:4},{value:"flatten",id:"flatten",level:4},{value:"Function Types",id:"function-types",level:3},{value:"Passing a variable of function type as an argument",id:"passing-a-variable-of-function-type-as-an-argument",level:4},{value:"Calling lambda directly",id:"calling-lambda-directly",level:4},{value:"Function types and nullability",id:"function-types-and-nullability",level:4},{value:"Working with a nullable function type",id:"working-with-a-nullable-function-type",level:4},{value:"Member references",id:"member-references",level:3},{value:"You can store lambda in a variable",id:"you-can-store-lambda-in-a-variable",level:4},{value:"Use function reference instead",id:"use-function-reference-instead",level:4},{value:"Member references",id:"member-references-1",level:4},{value:"Passing function reference as an argument",id:"passing-function-reference-as-an-argument",level:4},{value:"Bound &amp; non-bound references",id:"bound--non-bound-references",level:4},{value:"Non-Bound Reference: the corresponding lambda",id:"non-bound-reference-the-corresponding-lambda",level:4},{value:"Bound Reference",id:"bound-reference",level:4},{value:"Bound to this reference",id:"bound-to-this-reference",level:4},{value:"Question",id:"question",level:4},{value:"return from Lambda",id:"return-from-lambda",level:3}];function o(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"nullability--functional-programming",children:"Nullability & Functional Programming"})}),"\n",(0,i.jsx)(e.h2,{id:"nullable-types",children:"Nullable types"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Make exceptions occur at compile time, rather than runtime."}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'// String only\nval s1: String = "always not null"\n\n// Allows String or null\nval s2: String? = null\n'})}),"\n",(0,i.jsx)(e.h3,{id:"dealing-with-nullable-types",children:"Dealing with Nullable Types"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"val s: String?\n\nif(s != null){\n    s.length\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"is equivalent to"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"val s: String?\n\ns?.length\n"})}),"\n",(0,i.jsx)(e.h3,{id:"nullability-operators",children:"Nullability operators"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"// if s!= null, then return s.length\n// else return null\nval length: Int? = s?.length\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"// if s!= null, then return s.length\n// else return 0\nval length: Int = s?.length ?: 0\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"What will be printed?"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'val a: Int? = null\nval b: Int? = 1\nval c: Int = 2\n\nval s1 = (a ?: 0) + c\nval s2 = (b ?: 0) + c\nprint("$s1$s2")\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Answer: ",(0,i.jsx)(e.code,{children:"23"})]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"making-null-pointer-exception-explicit",children:"Making Null Pointer Exception Explicit"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"val s: String?\n\ns!!\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["This basically means:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["If ",(0,i.jsx)(e.code,{children:"s"})," is not null, give ",(0,i.jsx)(e.code,{children:"s"})]}),"\n",(0,i.jsxs)(e.li,{children:["Else if ",(0,i.jsx)(e.code,{children:"s"})," is null, then give a Null Pointer Exception."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.admonition,{type:"tip",children:(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Don't use Null Pointer Exception excessively."}),"\n",(0,i.jsx)(e.li,{children:"Don't use two NPEs within the same line. Otherwise, you won't know which one thrown the exception."}),"\n"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Which line(s) won't compile?"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'#1 fun isFoo1(n: Name) = n.value == "foo"\n#2 fun isFoo2(n: Name?) = n.value == "foo"\n#3 fun isFoo3(n: Name?) = n != null && n.value == "foo"\n#4 fun isFoo4(n: Name?) = n?.value == "foo"\n\n   fun main(args: Array<String>) {\n#5   isFoo1(null)\n#6   isFoo2(null)\n#7   isFoo3(null)\n#8   isFoo4(null)\n   }\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Answer: #2 and #5"}),"\n",(0,i.jsx)(e.li,{children:"What will be printed?"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"val x: Int? = 1\nval y: Int = 2\nval sum = x ?: 0 + y\nprintln(sum)\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Answer: ",(0,i.jsx)(e.code,{children:"1"})]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"nullable-types-under-the-hood",children:"Nullable types under the hood"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"@Nullable, @NotNull"})," annotations"]}),"\n",(0,i.jsxs)(e.li,{children:["How many objects are created to store a value of a nullable String?","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"val s: String?"})}),"\n",(0,i.jsx)(e.li,{children:"Answer: Only one object to store a String value"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"list-of-nullable-elements-vs-nullable-list",children:"List of nullable elements vs nullable List"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"List<Int?>"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Every element might be either ",(0,i.jsx)(e.code,{children:"null"})," or ",(0,i.jsx)(e.code,{children:"Int"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"List<Int>?"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["The whole list might be either ",(0,i.jsx)(e.code,{children:"null"})," or ",(0,i.jsx)(e.code,{children:"Int"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-fun",metastring:"foo(list1: List<Int?>, list2: List<Int>?) {",children:"#1  list1.size\n#2  list2.size\n\n#3  val i: Int =\n#4    list1.get(0)\n#5  val j: Int =\n#6    list2.get(0)\n  }\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Line 2: ",(0,i.jsx)(e.code,{children:"list2?.size"})]}),"\n",(0,i.jsxs)(e.li,{children:["Line 3: ",(0,i.jsx)(e.code,{children:"val i: Int?"})]}),"\n",(0,i.jsxs)(e.li,{children:["Line 5: ",(0,i.jsx)(e.code,{children:"val j: Int? ="})]}),"\n",(0,i.jsxs)(e.li,{children:["Line 6: ",(0,i.jsx)(e.code,{children:"list2?.get(0)"})]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"safe-casts",children:"Safe Casts"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Type cast: ",(0,i.jsx)(e.code,{children:"as"})]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"if (any is String){\n   val s = any as String\n   s.toUpperCase()\n}\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Could be shorten to:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"if (any is String){\n   any.toUpperCase()\n}\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Could use ",(0,i.jsx)(e.code,{children:"as?"})," as well:"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"(any as ?String)?.toUpperCase();\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"foo as? Type"})," can be either:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"foo as Type"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"null"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"functional-programming",children:"Functional Programming"}),"\n",(0,i.jsx)(e.h3,{id:"lambdas",children:"Lambdas"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'button.addActionListener { println("Hi")}\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Allows collections to be written in a functional style"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"employees.filter { it.city == City.PRAGUE }\n  .map{ it.age }\n  .average()\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Lambda Syntax"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"{ x: Int, y: Int -> x + y}\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Passing Lambda as an argument"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"list.any({i: Int -> i > 0})\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"When lambda is the last argument, it can be outside the parentheses."}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"list.any() {i: Int -> i > 0}\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"If parentheses are empty, it can be omitted."}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"list.any {i: Int -> i > 0}\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"it"})," denotes the argument if it's the only one"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"list.any {it > 0}\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Multi-line lambda is allowed where the last expression is the result"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'list.any {\n  println("processing $it")\n  it > 0\n}\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Destructuring declarations syntax instead"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'map.mapValues { entry -> "${entry.key} -> ${entry.value}!"}\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Another way:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'map.mapValues { (key, value) -> "$key -> $value!" }\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"If one parameter is not used, you can omit that parameter name:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'map.mapValues { (_, value) -> "$value!" }\n'})}),"\n",(0,i.jsx)(e.h3,{id:"common-operations-on-collections",children:"Common Operations on collections"}),"\n",(0,i.jsx)(e.h4,{id:"filter",children:"Filter"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:".filter { it % 2 == 0}\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["input: ",(0,i.jsx)(e.code,{children:"1, 2, 3, 4 ..."})]}),"\n",(0,i.jsxs)(e.li,{children:["output: ",(0,i.jsx)(e.code,{children:"2, 4, ..."})]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"map",children:"Map"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:".map { it * it }\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["input: ",(0,i.jsx)(e.code,{children:"1, 2, 3, 4"})]}),"\n",(0,i.jsxs)(e.li,{children:["output: ",(0,i.jsx)(e.code,{children:"1, 4, 9, 16"})]}),"\n",(0,i.jsx)(e.li,{children:"output size is the same as input size."}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"any",children:"any"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"if at least one element satisfies the condition, then return true."}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"all",children:"all"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"all elements satisfies the condition, then return true."}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"none",children:"none"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"none of the elements satisfies the condition, then return true."}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"find",children:"find"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"finds the element and returns the element if it satisfies the condition"}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"firstornull",children:"firstOrNull"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"returns the first element found if it satisfies the condition, or null if otherwise."}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"count",children:"count"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"returns a counter of the number of elements that satisfies the condition."}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"partition",children:"partition"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"returns the list of elements that satisfy the condition and another list of the ones that failed the condition."}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"groupby",children:"groupby"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"returns collections sorted by the condition to group by"}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"associateby",children:"associateBy"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"returns one element of the mapped value from the condition."}),"\n"]}),"\n",(0,i.jsx)(e.admonition,{type:"warning",children:(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"duplicates are removed, so make sure the key is unique in your condition to prevent data loss."}),"\n"]})}),"\n",(0,i.jsx)(e.h4,{id:"associate",children:"associate"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"use associate to build a map based on a list."}),"\n",(0,i.jsx)(e.li,{children:"first part is the key and second part is the value"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:".associate { `a` + it to 10 * it }\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["input: ",(0,i.jsx)(e.code,{children:"1, 2, 3, 4 ..."})]}),"\n",(0,i.jsxs)(e.li,{children:["output: ",(0,i.jsx)(e.code,{children:"a -> 10, b -> 20, c -> 30, d -> 40"})]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"zip",children:"zip"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"returns a combination of two collections"}),"\n",(0,i.jsxs)(e.li,{children:["input: ",(0,i.jsx)(e.code,{children:"1, 2, 3, 4, ..."})]}),"\n",(0,i.jsxs)(e.li,{children:["second input: ",(0,i.jsx)(e.code,{children:"a, b, c, d, ..."})]}),"\n",(0,i.jsx)(e.li,{children:"output:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"[1, a], [2, b], [3, c], [4, d], ...\n"})}),"\n",(0,i.jsx)(e.h4,{id:"zipwithnext",children:"zipWithNext"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"returns a collection containing pairs of first and next element"}),"\n",(0,i.jsxs)(e.li,{children:["input: ",(0,i.jsx)(e.code,{children:"1, 2, 3, 4, ..."})]}),"\n",(0,i.jsxs)(e.li,{children:["output: ",(0,i.jsx)(e.code,{children:"[1, 2], [2, 3], [3, 4], ..."})]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"flatten",children:"flatten"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"combines a list of lists into one collection"}),"\n",(0,i.jsxs)(e.li,{children:["input: ",(0,i.jsx)(e.code,{children:"[a, b, c], [d, e], [f, g, h, i]"})]}),"\n",(0,i.jsxs)(e.li,{children:["output: ",(0,i.jsx)(e.code,{children:"[a, b, c, d, e, f, g, h, i]"})]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"function-types",children:"Function Types"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"val sum: (Int, Int) -> Int = { x: Int, y: Int -> x + y }\n// is equivalent to\nval sum = { x: Int, y: Int -> x + y }\n\nval result: Int = sum(1, 2)\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["The type of the function sum is: ",(0,i.jsx)(e.code,{children:"(Int, Int) -> Int"})]}),"\n",(0,i.jsxs)(e.li,{children:["The type of result is ",(0,i.jsx)(e.code,{children:"Int"})]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"passing-a-variable-of-function-type-as-an-argument",children:"Passing a variable of function type as an argument"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"val isEven = { i: Int -> i % 2 == 0 }\n\nval list = listOf(1, 2, 3, 4)\nlist.any(isEven)\nlist.filter(isEven)\n"})}),"\n",(0,i.jsx)(e.h4,{id:"calling-lambda-directly",children:"Calling lambda directly"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Preferred way:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'run { println("hey!") }\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Another way but ugly syntax:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'{ println("hey!") }()\n'})}),"\n",(0,i.jsx)(e.h4,{id:"function-types-and-nullability",children:"Function types and nullability"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"() -> Int?\n\n//vs.\n\n(() -> Int)?\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Which lines won't compile?"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"#1 val f1: () -> Int? = null\n#2 val f2: () -> Int? = { null }\n#3 val f3: (() -> Int)? = null\n#4 val f4: (() -> Int)? = { null }\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Answer: lines 1, 4"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"() -> Int?"})," means the return type is nullable, not the whole type itself"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"(() -> Int)?"})," means the whole type is nullable (the variable is nullable)"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["In line 2, ",(0,i.jsx)(e.code,{children:"{null}"})," means a lambda without arguments that always returns null"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["In line 3, ",(0,i.jsx)(e.code,{children:"f3"})," is either a lambda returning ",(0,i.jsx)(e.code,{children:"Int"})," or ",(0,i.jsx)(e.code,{children:"null"})," reference"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"working-with-a-nullable-function-type",children:"Working with a nullable function type"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"val f: (() -> Int)? = null\n\nif( f != null){\n  f()\n}\n\nf?.invoke()\n"})}),"\n",(0,i.jsx)(e.h3,{id:"member-references",children:"Member references"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"class Person(val name: String, val age: Int)\npeople.maxBy { it.age }\npeople.maxBy(Person::age)\n"})}),"\n",(0,i.jsx)(e.h4,{id:"you-can-store-lambda-in-a-variable",children:"You can store lambda in a variable"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"val isEven: (Int) -> Boolean = { i: int -> i % 2 == 0 }\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["You cannot store a function in a variable such as ",(0,i.jsx)(e.code,{children:"val predicate = isEven"})]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"use-function-reference-instead",children:"Use function reference instead"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"fun isEven(i: Int): Boolean = i % 2 == 0\nval predicate = ::isEven\n// same as\nval predicate = { i: int -> isEven(i) }\n"})}),"\n",(0,i.jsx)(e.h4,{id:"member-references-1",children:"Member references"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"val action = { person: Person, message: String ->\n  sendEmail(person, message)\n}\n\nval action = ::sendEmail\n"})}),"\n",(0,i.jsx)(e.h4,{id:"passing-function-reference-as-an-argument",children:"Passing function reference as an argument"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"fun isEven(i: Int): Boolean = i % 2 == 0\n\nval list = listOf(1, 2, 3, 4)\nlist.any(::isEven)\nlist.filter(::isEven)\n"})}),"\n",(0,i.jsx)(e.h4,{id:"bound--non-bound-references",children:"Bound & non-bound references"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'class Person(val name: String, val age: Int){\n  fun isOlder(ageLimit: Int) = age > ageLimit\n}\n\nval agePredicate = Person::isOlder\n\nval alice = Person("Alice", 29)\nagePredicate(alice, 21)\n'})}),"\n",(0,i.jsx)(e.h4,{id:"non-bound-reference-the-corresponding-lambda",children:"Non-Bound Reference: the corresponding lambda"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Called on any object of a given type"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'class Person(val name: String, val age: Int){\n  fun isOlder(ageLimit: Int) = age > ageLimit\n}\n\nval agePredicate = (Person, Int) -> Boolean = { person, ageLimit -> person.isOlder(ageLimit) }\n\nval alice = Person("Alice", 29)\nagePredicate(alice, 21)\n'})}),"\n",(0,i.jsx)(e.h4,{id:"bound-reference",children:"Bound Reference"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Stores the object on which the member can delay to be called"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'class Person(val name: String, val age: Int){\n  fun isOlder(ageLimit: Int) = age > ageLimit\n}\n\nval alice = Person("Alice", 29)\nval agePredicate: (Int) -> Boolean = alice::isOlder\nagePredicate(21)\n'})}),"\n",(0,i.jsx)(e.h4,{id:"bound-to-this-reference",children:"Bound to this reference"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"class Person(val name: String, val age: Int){\n  fun isOlder(ageLimit: Int) = age > ageLimit\n\n  fun getAgePredicate() = this::isOlder\n}\n"})}),"\n",(0,i.jsx)(e.h4,{id:"question",children:"Question"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["What is the type of ",(0,i.jsx)(e.code,{children:"::isOlder"})," here?"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"class Person(val name: String, val age: Int) {\n  fun isOlder(ageLimit: Int) = age > ageLimit\n  fun getAgePredicate() = ::isOlder\n}\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Answer: ",(0,i.jsx)(e.code,{children:"(Int) -> Boolean"})]}),"\n",(0,i.jsxs)(e.li,{children:["Is ",(0,i.jsx)(e.code,{children:"::isEven"})," a bound reference?"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"fun isEven(i: Int): Boolean = i % 2 == 0\n\nval list = listOf(1, 2, 3, 4)\nlist.any(::isEven)\nlist.filter(::isEven)\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Answer: no"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"return-from-lambda",children:"return from Lambda"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"What will be printed?"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"fun duplicateNonZero(list: List<Int>): List<Int> {\n  return list.flatMap l@ {\n    if (it == 0) return@l listOf()\n    listOf(it, it)\n  }\n}\nprintln(duplicateNonZero(listOf(3, 0, 5)))\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Answer: ",(0,i.jsx)(e.code,{children:"[]"})]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},8453:(n,e,l)=>{l.d(e,{R:()=>t,x:()=>r});var i=l(6540);const s={},a=i.createContext(s);function t(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);